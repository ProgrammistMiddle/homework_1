print ('Задача 1')
'''### Задача 1

Выведите на экран следующий паттерн:

@

@ @

@ @ @

@ @ @ @ @

Обратите внимание на пробел между символами'''
x=[1]
ind1,ind2= 0,1
n=1
for i in range(1,5):    
    x.append(i)
    print('@ '*n)
    print ()
    n=x[ind1]+x[ind2]
    ind1+=1
    ind2 +=1


print ('Задача 2')
'''
Задача 2

Выведите на экран следующий паттерн:

1

2 2

3 3 3

4 4 4 4

5 5 5 5 5

6 6 6 6

7 7 7

8 8

9

Обратите внимание на пробел между символами'''

count=1
for i in range(1,10):
    if count<=5 and i<=4:
        t= (str(i)+' ')*count
        count+=1
        print ()
        print (t)
    else: 
        t= (str(i)+' ')*count
        count-=1
        print ()
        print (t)


print ('Задача 3')
'''### Задача 3

Используя цикл while, выведите на экран таблицу умножения для числа 7.

**Пример:**
    
Для числе 5 выдача выглядит так:
    
5 * 1 = 5

5 * 2 = 10

5 * 3 = 15

5 * 4 = 20

5 * 5 = 25

...

5 * 9 = 45'''

for i in range(1,10):
    print ('7 *',i,'=',7*i)
    print ()




print ('Задача 4')
'''### Задача 4

Представьте, что вы подбрасываете два кубика одновременно. Считайте с входящей строки два целых числа d1 и d2. Проверьте, соответсуют ли введенные числа интервалу значений для кубика. Если нет, то выведите на экран строку "Ошибка! Значение на кубике (1 или 2, вставьте подходящее значение) не входит в интервал [1, 6]". В противном случае посчитайте сумму выпавших значений. Если сумма равна 7 или 11, выведите на экран "Я победил!!!". Если сумма равна 2, 3 или 12, то выведите на экран "Я проиграл :(". Во всех остальных случаях выведите на экран сумму значений.'''


x=int(input('введите первое целое число от 1 до 6: '))
    
y=int(input('введите второе целое число от 1 до 6: '))

sum=x+y
if x<1 or x >6 or y<1 or y>6:
    print ('Ошибка! Значение на кубике (1 или 2, вставьте подходящее значение) не входит в интервал [1, 6]')
elif sum==7 or sum==11:
    print ('Я победил')
elif sum==2 or sum==3 or sum==12:
    print ('Я проиграл')
else: print ('Сумма чисел равна:',sum)



print ('Задача 5')
'''### Задача 5

Напишите код, который ищет все числа в интервале от 3000 до 4300 включительно, делящиеся на 11, но не делящиеся на 5. Выведите на экран все найденные числа.'''

for i in range(3000,4301):
    if i%11==0 and i%5!=0:
        print(i)


print ('Задача 6')
'''### Задача 6

Используя циклы, напишите код, который создает список (list) путем конкатенации значений данного листа с целыми числами от 1 до (произвольного) n включительно.

Пример:

для списка ["сосиски", "горчица"] при n = 3 результат должен выглядеть так:

['сосиски_1', 'горчица_1', 'сосиски_2', 'горчица_2', 'сосиски_3', 'горчица_3']'''

sample_list=['мандаринки','киви','лимон']


update_list=[]
n=1
while n<=3:
    for i in sample_list:
        update_list.append(i+'_' +str(n))
    n+=1
print (update_list )



print ('Задача 7')
'''### Задача 7

Напишите код, который считает количество элементов в заданном списке до тех пор, пока не встретится элемент типа словарь.

Пример:

для списка [3, "котики", 0.45, 5, {'котики' : 2, 'слоники' : 9}, "слоники", 34] на выходе должны получить число 4'''

list_for_pro_task_2= [35, 0.24, 3+4j, "котики", 0.45, (8, 9), "слоники", {'Мадрид': 3, 'Лондон': 5}, 23498]
count=[]
for i in list_for_pro_task_2:
    if type(i) == dict:
        break 
    else:
        count.append(i)
print (len(count)) 



print ('Задача 8')
'''### Задача 8

Создайте словарь (dict) c ключами, соответствующими числам от 1 до 20 включительно и значениями, соответствующими квадратам ключей. 

P.S. используйте циклы или функции, прямое "ручное" присваивание не допускается (!!!)

Пример: 

для чисел от 1 до 3 включительно словарь должен выглядеть так: {1 : 1, 2 : 4, 3 : 9}'''
new_dict={}

for i in range(1,21):
    new_dict[i]= i**2
print (new_dict )














